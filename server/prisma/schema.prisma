// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique // clerk user id
  email           String           @unique
  name            String?
  imageUrl        String?
  transactions    Transaction[]
  accounts        Account[]
  scheduledEmails ScheduledEmail[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("users")
}

model Account {
  id              String           @id @default(uuid())
  name            String
  balance         Decimal          @default(0) // will ask inital balance while creating an account
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  scheduledEmails ScheduledEmail[]
  budget          Decimal?
  usedAmount      Decimal          @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String              @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category          TransactionCategory
  receiptUrl        String? // will check it later 
  isRecurring       Boolean             @default(false)
  recurringInterval RecurringInterval? // Only used if isRecurring is true
  nextRecurringDate DateTime? // Next date for recurring transaction
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

model ScheduledEmail {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  account   Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  type      EmailType
  status    EmailStatus @default(PENDING)
  createdAt DateTime    @default(now())

  @@map("scheduled_emails")
}

enum EmailType {
  BUDGET_ALERT
  MONTHLY_REPORT
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionCategory {
  SALARY
  INVESTMENTS
  FOOD
  TRANSPORT
  HOUSING
  ENTERTAINMENT
  TRAVEL
  HEALTH
  SHOPPING
  MISCELLANEOUS
}
